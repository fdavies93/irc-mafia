class vote:
	def __init__(self,callback):
		self.peopleVoting = [] #people allowed to vote
		self.choices = [] #list of voteOptions available to vote for
		self.onFinish = callback #a function taking a list of choices 

	def createBinaryChoice(self):
		self.choices = [voteOption("yes"),voteOption("no")]

###############################
# button is an example of how function pointers work

class button:
	def __init__(self,clicked):
		self.clickFunction = clicked

	def clickFunction(self):
		self.clickFunction()

def sayStuff():
	print "Hello world!"

#button(sayStuff)

################################

class voteOption:
	def __init__(self, name):
		self.name = name
		self.votes = 0

class person:
	def __init__(self, name):
		self.name = name #string
		self.type = "Villager" # "Villager" / "Werewolf"
		self.isChief = False #boolean
		self.lover = None #another player or None
		self.isDead = False #boolean

class manager:
	def __init__(self):
		self.isDay = True
		self.dayNumber = 0
		self.isQuit = False #has the game quit?
		self.people = [] #LIST of people

	#def setupGame():
		#coming soon

	def startGame(self):
		setupGame()
		while(isQuit == False):
			gameLoop()

	def gameLoop(self):
		runDay()
		runNight()

	#def runDay():

	#def runNight():

	#killVote = vote(resolveKillVote)

	# This is dramatic!
	def resolveKillVote(self,choices):
		votesToKill = 0
		personToKill = ""

		for choice in choices:
			if(choice.votes > votesToKill):
				personToKill = choice.name
				votesToKill = choice.votes

			#needs a thing to deal with equal votes for same person

		for person in self.people:
			if(person.name == personToKill):
				person.isDead = True
				print person.name , "is dead!"

bot = manager()

#everything below here would be generated by other processes

tadej = person("tadej")
samantha = person("samantha")
frank = person("frank")

bot.people = [tadej, samantha, frank]

tadejOption = voteOption("tadej")
tadejOption.votes = 1000
samanthaOption = voteOption("samantha")
samanthaOption.votes = 1
frankOption = voteOption("frank")
frankOption.votes = 10000

voteList = [tadejOption, samanthaOption, frankOption]


bot.resolveKillVote(voteList)